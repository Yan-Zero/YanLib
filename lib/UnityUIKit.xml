<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnityUIKit</name>
    </assembly>
    <members>
        <member name="T:UnityUIKit.Components.BoxGrid">
            <summary>
            当子节点数据特别多的时候使用这种方法会很消耗资源，这种情况下需要考虑循环列表的使用。当结构功能复杂的布局也不能使用这种布局。
            </summary>
        </member>
        <member name="F:UnityUIKit.Components.BoxGrid.ComponentAttributes.StartCorner">
            <summary>
            第一个元素所在的角
            </summary>
        </member>
        <member name="F:UnityUIKit.Components.BoxGrid.ComponentAttributes.ChildrenAlignment">
            <summary>
            如果布局元素未填满所有可用空间，则用于这些元素的对齐方式。
            </summary>
        </member>
        <member name="F:UnityUIKit.Components.BoxGrid.ComponentAttributes.Padding">
            <summary>
            布局组边缘内的填充
            </summary>
        </member>
        <member name="F:UnityUIKit.Components.BoxGrid.ComponentAttributes.Spacing">
            <summary>
            布局元素之间的间距
            </summary>
        </member>
        <member name="F:UnityUIKit.Components.BoxGrid.ComponentAttributes.CellSize">
            <summary>
            组中每个布局元素要使用的大小
            </summary>
        </member>
        <member name="F:UnityUIKit.Components.BoxGrid.ComponentAttributes.StartAxis">
            <summary>
            沿着哪个主轴放置元素。
            在开始新行之前，Horizontal 将填满整个行。
            在开始新列之前，Vertical 将填充整个列。
            </summary>
        </member>
        <member name="F:UnityUIKit.Components.BoxGrid.ComponentAttributes.Constraint">
            <summary>
            将网格限制为固定数量的行或列，以辅助自动布局系统。
            
            Flexible - 不约束
            Fixed Column Count - 固定列数
            Fixed Row Count - 	固定行数
            </summary>
        </member>
        <member name="F:UnityUIKit.Components.BoxGrid.ComponentAttributes.ConstraintCount">
            <summary>
            约束数量
            </summary>
        </member>
        <member name="F:UnityUIKit.Components.BoxGroup.ComponentAttributes.Direction">
            <summary>
            方向
            </summary>
        </member>
        <member name="F:UnityUIKit.Components.BoxGroup.ComponentAttributes.Padding">
            <summary>
            上下左右
            上下 左右 
            上 左右 下
            上 右 下 左
            </summary>
        </member>
        <member name="P:UnityUIKit.Components.BoxGroup.ComponentAttributes.RectOffset">
            <summary>
            偏移
            </summary>
        </member>
        <member name="T:UnityUIKit.Components.BoxRect.ComponentAttributes">
            <summary>
            组件属性
            </summary>
        </member>
        <member name="F:UnityUIKit.Components.BoxRect.ComponentAttributes.SizeDelta">
            <summary>
            大小
            </summary>
        </member>
        <member name="F:UnityUIKit.Components.BoxRect.ComponentAttributes.Pivot">
            <summary>
            中心
            </summary>
        </member>
        <member name="T:UnityUIKit.Components.IText">
            <summary>
            Text 类的接口
            </summary>
        </member>
        <member name="P:UnityUIKit.Components.IText.Text">
            <summary>
            Text 的属性接口
            </summary>
        </member>
        <member name="M:UnityUIKit.Components.IText.SetParent(UnityUIKit.Core.ManagedGameObject,System.Boolean)">
            <summary>
            单纯为了兼容罢了
            </summary>
            <param name="managedGameObject"></param>
            <param name="worldPositionStays"></param>
        </member>
        <member name="M:UnityUIKit.Components.IText.Create(System.Boolean)">
            <summary>
            为了兼容
            </summary>
            <param name="active"></param>
        </member>
        <member name="P:UnityUIKit.Components.IText.Name">
            <summary>
            虽然没用上，但是还是兼容（
            </summary>
        </member>
        <member name="T:UnityUIKit.Components.TextControl">
            <summary>
            托管 Text
            </summary>
        </member>
        <member name="T:UnityUIKit.Components.TMPControl">
            <summary>
            Text Control 的 TMP_Text 版
            </summary>
        </member>
        <member name="P:UnityUIKit.Components.TMPControl.Text">
            <summary>
            组件本身
            </summary>
        </member>
        <member name="M:UnityUIKit.Components.TMPControl.Apply(UnityUIKit.Core.ManagedComponent.ComponentAttributes)">
            <summary>
            应用配置
            </summary>
            <param name="componentAttributes">Attributes，配置</param>
        </member>
        <member name="T:UnityUIKit.Components.TMPControl.ComponentAttributes">
            <summary>
            Attributes
            </summary>
        </member>
        <member name="T:UnityUIKit.Core.Direction">
            <summary>
            方向
            </summary>
        </member>
        <member name="F:UnityUIKit.Core.Direction.Horizontal">
            <summary>
            水平
            </summary>
        </member>
        <member name="F:UnityUIKit.Core.Direction.Vertical">
            <summary>
            竖直
            </summary>
        </member>
        <member name="T:UnityUIKit.Core.GameObjects.BoxPlainGameObject">
            <summary>
            没有任何对象，单纯手操 RectTransform 用的
            </summary>
        </member>
        <member name="M:UnityUIKit.Core.GameObjects.BoxPlainGameObject.Create(System.Boolean)">
            <summary>
            创建
            </summary>
            <param name="active"></param>
        </member>
        <member name="F:UnityUIKit.Core.ManagedGameObject.DefaultActive">
            <summary>
            默认激活状态
            </summary>
        </member>
        <member name="F:UnityUIKit.Core.ManagedGameObject.Children">
            <summary>
            子对象集合，但是并非被很好地维护。
            </summary>
        </member>
        <member name="M:UnityUIKit.Core.ManagedGameObject.SetParent(UnityUIKit.Core.ManagedGameObject,System.Boolean)">
            <summary>
            设置父对象
            </summary>
            <param name="managedGameObject"></param>
            <param name="worldPositionStays"></param>
        </member>
        <member name="F:UnityUIKit.Core.ManagedGameObject.Parent">
            <summary>
            显然，获取父对象
            </summary>
        </member>
        <member name="M:UnityUIKit.Core.UIKitHelper.HexToColor(System.String)">
            <summary>
            hex转换到color
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="T:UnityUIKit.GameObjects.Block">
            <summary>
            容器之一，但是无法更改 Children 的布局与大小
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Block.BackgroundImage">
            <summary>
            背景图片
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Block.BackgroundColor">
            <summary>
            背景颜色
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Block.BackgroundType">
            <summary>
            背景图片类型
            </summary>
        </member>
        <member name="P:UnityUIKit.GameObjects.Block.Background">
            <summary>
            背景图片
            </summary>
        </member>
        <member name="M:UnityUIKit.GameObjects.Block.Create(System.Boolean)">
            <summary>
            创造 Block 对象
            </summary>
            <param name="active"></param>
        </member>
        <member name="T:UnityUIKit.GameObjects.Button">
            <summary>
            按钮
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Button.OnClick">
            <summary>
            点击的回调函数
            </summary>
        </member>
        <member name="M:UnityUIKit.GameObjects.Button.OnClick_Invoke">
            <summary>
            为了方便后人（类）罢了。
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Button.UnityButton">
            <summary>
            Unity 的 Button 类，懒得写个 Component 了
            </summary>
        </member>
        <member name="P:UnityUIKit.GameObjects.Button.Interactable">
            <summary>
            交互性
            </summary>
        </member>
        <member name="M:UnityUIKit.GameObjects.Button.Create(System.Boolean)">
            <summary>
            创建按钮对象
            </summary>
            <param name="active"></param>
        </member>
        <member name="T:UnityUIKit.GameObjects.Container.FitterContainer">
            <summary>
            会自动调整大小的
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Container.FitterContainer.BackgroundImage">
            <summary>
            背景图片
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Container.FitterContainer.BackgroundColor">
            <summary>
            背景颜色
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Container.FitterContainer.BackgroundType">
            <summary>
            背景图片类型
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Container.BackgroundImage">
            <summary>
            背景图片
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Container.BackgroundColor">
            <summary>
            背景颜色
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Container.BackgroundType">
            <summary>
            背景图片类型
            </summary>
        </member>
        <member name="P:UnityUIKit.GameObjects.Container.Background">
            <summary>
            背景
            </summary>
        </member>
        <member name="M:UnityUIKit.GameObjects.Container.Create(System.Boolean)">
            <summary>
            创建 Container
            </summary>
            <param name="active"></param>
        </member>
        <member name="T:UnityUIKit.GameObjects.TMPLabel">
            <summary>
            TMP 版的 Label
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.TMPLabel._Text">
            <summary>
            Text 的配置
            </summary>
        </member>
        <member name="P:UnityUIKit.GameObjects.TMPLabel.TMPControl">
            <summary>
            托管 TMP_Text
            </summary>
        </member>
        <member name="P:UnityUIKit.GameObjects.TMPLabel.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="M:UnityUIKit.GameObjects.TMPLabel.Create(System.Boolean)">
            <summary>
            创建实例
            </summary>
            <param name="active">创建的是否是否为激活状态</param>
        </member>
        <member name="M:UnityUIKit.GameObjects.TMPLabel.Apply">
            <summary>
            应用 _Text 的配置
            </summary>
        </member>
        <member name="T:UnityUIKit.GameObjects.Label">
            <summary>
            正常版的 Label
            </summary>
        </member>
        <member name="P:UnityUIKit.GameObjects.Label.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="T:UnityUIKit.GameObjects.BaseTogleButton">
            <summary>
            Toggle 与 Button 的基类
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.BaseTogleButton.m_interactable">
            <summary>
            给子类用的 m_interactable
            </summary>
        </member>
        <member name="P:UnityUIKit.GameObjects.BaseTogleButton.Interactable">
            <summary>
            可交互
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.BaseTogleButton.Image">
            <summary>
            按钮图片
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.BaseTogleButton.ImageColor">
            <summary>
            颜色
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.BaseTogleButton.ImageType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:UnityUIKit.GameObjects.BaseTogleButton.Label">
            <summary>
            文本托管的实例。
            </summary>
        </member>
        <member name="M:UnityUIKit.GameObjects.BaseTogleButton.Create(System.Boolean)">
            <summary>
            创建对像
            </summary>
            <param name="active"></param>
        </member>
        <member name="T:UnityUIKit.GameObjects.Slider">
            <summary>
            滑条
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Slider.BackgroundImage">
            <summary>
            背景图片
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Slider.BackgroundType">
            <summary>
            背景类型
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Slider.SliderHandleImage">
            <summary>
            滑条的 Handle
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Slider.FillAreaImage">
            <summary>
            填充区域的 Sprite
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Slider.FillAreaType">
            <summary>
            填充图片的 Type
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Slider.SliderHandleType">
            <summary>
            Handle 的类型
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Slider.Handle">
            <summary>
            拖拽的按钮
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Slider.UnitySlider">
            <summary>
            懒得托管
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Slider.BackgroundContainer">
            <summary>
            背景
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Slider.m_MaxValue">
            <summary>
            最大值
            </summary>
        </member>
        <member name="P:UnityUIKit.GameObjects.Slider.Interactable">
            <summary>
            可交互性
            </summary>
        </member>
        <member name="P:UnityUIKit.GameObjects.Slider.MaxValue">
            <summary>
            最大值
            </summary>
        </member>
        <member name="P:UnityUIKit.GameObjects.Slider.MinValue">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:UnityUIKit.GameObjects.Slider.WholeNumber">
            <summary>
            自由滑动还是仅整数
            </summary>
        </member>
        <member name="P:UnityUIKit.GameObjects.Slider.Value">
            <summary>
            当前值
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Slider.Direction">
            <summary>
            方向
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Slider.OnValueChanged">
            <summary>
            在值改变的时候调用
            </summary>
        </member>
        <member name="M:UnityUIKit.GameObjects.Slider.Create(System.Boolean)">
            <summary>
            创建新的 Slider 对象
            </summary>
            <param name="active"></param>
        </member>
        <member name="M:UnityUIKit.GameObjects.Slider.ValueChanged(System.Single)">
            <summary>
            在值改变的时候调用
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:UnityUIKit.GameObjects.Toggle">
            <summary>
            开关
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Toggle.onValueChanged">
            <summary>
            更改值时候调用
            </summary>
        </member>
        <member name="P:UnityUIKit.GameObjects.Toggle.IsOn">
            <summary>
            是否选中
            </summary>
        </member>
        <member name="P:UnityUIKit.GameObjects.Toggle.Interactable">
            <summary>
            交互性
            </summary>
        </member>
        <member name="F:UnityUIKit.GameObjects.Toggle.PreferredSize">
            <summary>
            预设大小
            </summary>
        </member>
        <member name="M:UnityUIKit.GameObjects.Toggle.Create(System.Boolean)">
            <summary>
            创建 Toggle 对象
            </summary>
            <param name="active"></param>
        </member>
        <member name="M:UnityUIKit.GameObjects.Toggle.OnValueChanged_Invoke(System.Boolean)">
            <summary>
            显然，是为了让子类重写的
            </summary>
            <param name="isOn"></param>
        </member>
        <member name="T:UnityUIKit.GameObjects.ToggleGroup">
            <summary>
            Toggle 组，仅有自动设置的功能
            </summary>
        </member>
    </members>
</doc>
